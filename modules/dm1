from datetime import datetime, timedelta
from pathlib import Path
import threading
import time
import psutil
import os
from rich.console import Console, Group
from rich.panel import Panel
from rich.text import Text

console = Console()

# 🔧 Watchdog Config
WATCHDOG_LOG_DIR = Path("logs")
WATCHDOG_LOG_DIR.mkdir(parents=True, exist_ok=True)
WATCHDOG_LOG_FILE = WATCHDOG_LOG_DIR / f"watchdog_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
WATCHDOG_CHECK_INTERVAL = 10.0
WATCHDOG_STALL_THRESHOLD = 5.0
WATCHDOG_SCROLL_INDEX = 0
WATCHDOG_SCROLL_WINDOW = 14
WATCHDOG_FILTER_MODE = False
LOG_SCROLL_WINDOW = 20
log_scroll_index = 0

# 🧩 Watchdog Logging
def log_watchdog(msg):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(WATCHDOG_LOG_FILE, "a") as f:
        f.write(f"[{timestamp}] {msg}\n")

def read_watchdog_log_scrolled(lines=LOG_SCROLL_WINDOW):
    global log_scroll_index
    try:
        log_files = sorted(WATCHDOG_LOG_DIR.glob("watchdog_*.log"), reverse=True)
        if not log_files:
            return Text("No log files found.", style="dim")
        latest_log = log_files[0]
        with latest_log.open("r") as f:
            content = f.readlines()
        total_lines = len(content)
        if total_lines == 0:
            return Text("Log file is empty.", style="dim")
        start = log_scroll_index % total_lines
        end = start + lines
        visible_lines = content[start:end]
        log_scroll_index += 1
        styled_lines = []
        for line in visible_lines:
            if "❌" in line or "error" in line.lower():
                styled_lines.append(Text(line.strip(), style="bold red"))
            elif "⚠️" in line or "warning" in line.lower():
                styled_lines.append(Text(line.strip(), style="yellow"))
            elif "✓" in line or "healthy" in line.lower():
                styled_lines.append(Text(line.strip(), style="green"))
            else:
                styled_lines.append(Text(line.strip(), style="white"))
        return Text("\n").join(styled_lines)
    except Exception as e:
        return Text(f"[red]Log read error: {e}[/red]")

def watchdog_ping_loop():
    while True:
        time.sleep(WATCHDOG_CHECK_INTERVAL)
        now = time.time()
        if not hasattr(console, "last_loop_time"):
            console.last_loop_time = now
            continue
        drift = now - console.last_loop_time
        if drift > WATCHDOG_STALL_THRESHOLD:
            log_watchdog(f"⚠️ Dashboard stalled! Drift: {drift:.2f}s")
            log_watchdog("Active threads:")
            for t in threading.enumerate():
                log_watchdog(f" - {t.name}")
            if hasattr(console, "last_exception"):
                log_watchdog(f"❌ Last Exception: {console.last_exception}")
        else:
            log_watchdog(f"✅ Dashboard healthy. Drift: {drift:.2f}s")

def build_watchdog_log_panel():
    global WATCHDOG_SCROLL_INDEX, WATCHDOG_FILTER_MODE
    try:
        with open(WATCHDOG_LOG_FILE, "r") as f:
            lines = [line.strip() for line in f.readlines()]
        if WATCHDOG_FILTER_MODE:
            lines = [line for line in lines if "⚠️" in line or "❌" in line]
        total_lines = len(lines)
        if total_lines == 0:
            body = Text("No watchdog entries yet.", style="dim")
        else:
            start = WATCHDOG_SCROLL_INDEX
            end = start + WATCHDOG_SCROLL_WINDOW
            if end >= total_lines:
                WATCHDOG_SCROLL_INDEX = 0
                start = 0
                end = WATCHDOG_SCROLL_WINDOW
            visible = lines[start:end]
            WATCHDOG_SCROLL_INDEX += 1
            body = Text("\n".join(visible), style="white")
        title = "🧩 Watchdog Logs"
        if WATCHDOG_FILTER_MODE:
            title += " [Filtered]"
        return Panel(body, title=title, border_style="grey37")
    except Exception as e:
        return Panel(f"[red]Error reading watchdog log: {e}[/red]", title="🧩 Watchdog Logs", border_style="red")

def build_dashboard_health_panel(refresh_interval=1.0):
    lines = []
    active_threads = threading.enumerate()
    now = time.time()
    expected_threads = ["update_scd4x_loop", "watchdog_ping_loop"]

    def format_thread_info(name):
        thread = next((t for t in active_threads if name in t.name), None)
        is_active = thread is not None
        symbol = "[green]✓[/green]" if is_active else "[red]✗[/red]"
        meta = console.thread_meta.get(name, {})
        if is_active:
            if "start_time" not in meta:
                meta["start_time"] = now
                meta["restarts"] = meta.get("restarts", 0) + 1
            uptime = timedelta(seconds=int(now - meta["start_time"]))
        else:
            uptime = "—"
        age_secs = (now - meta.get("start_time", now)) if is_active else 0
        age_color = "green" if age_secs < 60 else "yellow" if age_secs < 300 else "red"
        age_bar = "█" * min(int(age_secs / 10), 20)
        age_bar = Text(age_bar.ljust(20), style=age_color)
        try:
            process = psutil.Process(os.getpid())
            cpu = process.cpu_percent(interval=None)
            mem_mb = process.memory_info().rss / (1024 ** 2)
            usage = f"CPU: {cpu:.1f}% | Mem: {mem_mb:.1f}MB"
        except Exception:
            usage = "Usage: [red]Error[/red]"
        console.thread_meta[name] = meta
        return Group(
            Text.from_markup(f"[bold]{symbol} Thread: {name}[/bold]"),
            Text(f"Uptime: {uptime}", style="cyan"),
            Text(f"Restarts: {meta.get('restarts', 0)}", style="magenta"),
            Text("Age Bar: ") + age_bar,
            Text(usage, style="blue")
        )

    for name in expected_threads:
        lines.append(format_thread_info(name))

    lines.append(Text(f"Refresh Interval: {refresh_interval:.2f}s", style="cyan"))
    banner_flag = getattr(console, "banner_rendered", True)
    banner_status = "[green]✓[/green]" if banner_flag else "[yellow]Pending[/yellow]"
    lines.append(Text.from_markup(f"Banner Animation: {banner_status}"))

    if hasattr(console, "last_exception"):
        lines.append(Text(f"[red]Last Exception: {console.last_exception}[/red]"))

    try:
        if not hasattr(console, "last_frame_time"):
            console.last_frame_time = now
            frame_delta = 0.0
        else:
            frame_delta = now - console.last_frame_time
            console.last_frame_time = now
        lines.append(Text(f"Frame Render Δ: {frame_delta:.3f}s", style="blue"))
    except Exception as e:
        lines.append(Text(f"Frame Timing Error: {str(e)}", style="red"))

    try:
        if not hasattr(console, "last_loop_time"):
            console.last_loop_time = now
            drift = 0.0
        else:
            drift = now - console.last_loop_time - refresh_interval
            console.last_loop_time = now
        drift_color = "green" if abs(drift) < 0.1 else "yellow" if abs(drift) < 0.5 else "red"
        lines.append(Text(f"Loop Drift: {drift:+.3f}s", style=drift_color))
    except Exception as e:
        lines.append(Text(f"Loop Drift Error: {str(e)}", style="red"))

    body = Group(*lines)
    return Panel(body, title="📊 Dashboard Runtime Monitor", border_style="grey37")

