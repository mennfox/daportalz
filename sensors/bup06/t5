# dpz Dashboard

from collections import deque
ahtx0_temp_history = deque([0.0]*60, maxlen=60)
ahtx0_hum_history = deque([0.0]*60, maxlen=60)
co2_history = deque([0.0]*60, maxlen=60)
lux_history = deque([0.0]*60, maxlen=60)
htu21d_history = deque([0.0]*60, maxlen=60)
scd4x_history = deque([0.0]*60, maxlen=60)
sht31d_history = deque([0.0]*60, maxlen=60)
sht31d_spike_history = deque([0.0]*60, maxlen=60)
mcp9808_history = deque([0.0]*60, maxlen=60)
adt7410_history = deque([0.0]*60, maxlen=60)
hum_history = deque([0.0]*60, maxlen=60)
pressure_history = deque([0.0]*60, maxlen=60)  # Optional
temp_all_history = deque([0.0]*60, maxlen=60)
temp_spike_history = deque([0.0]*60, maxlen=60)

from statistics import mean, median, mode, StatisticsError
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.text import Text
from rich.layout import Layout
import psutil
import os
import time
import threading
from datetime import datetime
from pyfiglet import Figlet
from systemd.daemon import notify
import subprocess
import board
import busio
from adafruit_htu21d import HTU21D
import adafruit_scd4x
import adafruit_bh1750
from adafruit_as7341 import AS7341
import adafruit_sht31d
import adafruit_mcp9808
import adafruit_adt7410
import smbus2
import bme280
import adafruit_ahtx0
import json
from pathlib import Path

# Zone Constants
ZONES_LUX       = [(100, "blue"), (5500, "green"), (8500, "yellow"), (10000, "red")]
ZONES_TEMP      = [(18, "blue"), (25, "green"), (28.5, "yellow"), (32, "red")]
ZONES_TEMP_ROOM = [(18, "blue"), (25, "green"), (30, "yellow"), (40, "red")]
ZONES_HUM       = [(30, "sky_blue1"), (50, "cyan"), (70, "deep_sky_blue1"), (85, "steel_blue")]
ZONES_CO2       = [(600, "blue"), (1000, "green"), (1500, "yellow"), (2000, "red")]
ZONES_PRESSURE  = [(980, "blue"), (1013, "green"), (1030, "yellow"), (1050, "red")]

# Initialize I2C and sensors
i2c = busio.I2C(board.SCL, board.SDA)
hts = HTU21D(i2c)
scd4x = adafruit_scd4x.SCD4X(i2c)
scd4x.start_periodic_measurement()
bh1750 = adafruit_bh1750.BH1750(i2c)
as7341 = AS7341(i2c)
sht31 = adafruit_sht31d.SHT31D(i2c, address=0x44)
mcp9808 = adafruit_mcp9808.MCP9808(i2c)
adt7410 = adafruit_adt7410.ADT7410(i2c)
ahtx0 = adafruit_ahtx0.AHTx0(i2c)

bme_bus = smbus2.SMBus(1)
bme_address = 0x76
bme_calibration = bme280.load_calibration_params(bme_bus, bme_address)

# Historical max trackers for sensors
max_values = {
    "Environment": {"CO‚ÇÇ": float('-inf'), "Pressure": float('-inf')},
    "BH1750": {"Lux": float('-inf')},
    "HTU21d": {"Temp": float('-inf'), "Hum": float('-inf')},
    "SCD4X": {"Temp": float('-inf'), "Hum": float('-inf')},
    "BME280": {"Temp": float('-inf'), "Hum": float('-inf')},
    "Room": {"Temp": float('-inf'), "Hum": float('-inf')},
    "Tent": {
        "MCP9808": float('-inf'),
        "ADT7410": float('-inf'),
        "BME280": float('-inf')
    }
}
console = Console()
REFRESH_INTERVAL = 1.0
SCD4X_REFRESH = 10.0

scd4x_data = {"Temperature": "Waiting...", "Humidity": "Waiting..."}
environment_data = {"CO‚ÇÇ": "Waiting...", "Pressure": "Waiting..."}
HISTORY_LEN = 30
cpu_histories = [deque([0]*HISTORY_LEN, maxlen=HISTORY_LEN) for _ in range(psutil.cpu_count())]
mem_history = deque([0]*HISTORY_LEN, maxlen=HISTORY_LEN)
disk_history = deque([0]*HISTORY_LEN, maxlen=HISTORY_LEN)
net_sent_history = deque([0]*HISTORY_LEN, maxlen=HISTORY_LEN)
net_recv_history = deque([0]*HISTORY_LEN, maxlen=HISTORY_LEN)
prev_net = psutil.net_io_counters()

core_colors = ["cyan", "magenta", "yellow", "green"]

def sparkline(data, max_value=100, color="white"):
    blocks = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"
    scaled = [min(int((val / max_value) * (len(blocks) - 1)), len(blocks) - 1) for val in data]
    return Text("".join(blocks[i] for i in scaled), style=color)

def colorize(value, thresholds=(50, 75)):
    if value < thresholds[0]:
        return f"[green]{value:.1f}%[/green]"
    elif value < thresholds[1]:
        return f"[yellow]{value:.1f}%[/yellow]"
    else:
        return f"[red]{value:.1f}%[/red]"

def bar_visual(value, max_value=100, width=20, color="white"):
    filled_len = min(int((value / max_value) * width), width)
    bar = "‚ñà" * filled_len + " " * (width - filled_len)
    return Text(bar, style=color)

def zone_color(value, zones):
    for threshold, color in zones:
        if value <= threshold:
            return color
    return zones[-1][1]

def format_zone_bar(value, zones, label="", unit="", width=20, max_value=None):
    color = zone_color(value, zones)
    scale = max_value if max_value else zones[-1][0]
    bar = bar_visual(value, max_value=scale, width=width, color=color)
    return Text(f"{label:<10} {value:.1f}{unit:<3} ", style=color) + bar


def get_cpu_panel():
    cpu_percents = psutil.cpu_percent(percpu=True)
    table = Table(title="[bold cyan]CPU Usage[/bold cyan]", expand=True)
    table.add_column("Core", style="bold")
    table.add_column("Usage", style="bold")
    table.add_column("Graph")
    for i, percent in enumerate(cpu_percents):
        cpu_histories[i].append(percent)
        color = core_colors[i] if i < len(core_colors) else "white"
        graph = sparkline(cpu_histories[i], color=color)
        table.add_row(f"Core {i}", colorize(percent), graph)
    return Panel(table, border_style="grey37")

def get_memory_panel():
    mem = psutil.virtual_memory()
    mem_history.append(mem.percent)
    graph = sparkline(mem_history, color="magenta")
    table = Table(title="[bold magenta]Memory[/bold magenta]", expand=True)
    table.add_column("Used")
    table.add_column("Total")
    table.add_column("Usage")
    table.add_column("Graph")
    table.add_row(
        f"{mem.used // (1024**2)} MB",
        f"{mem.total // (1024**2)} MB",
        colorize(mem.percent),
        graph
    )
    return Panel(table, border_style="grey37")

def get_disk_panel():
    usage = psutil.disk_usage("/")
    disk_history.append(usage.percent)
    graph = sparkline(disk_history, color="yellow")
    table = Table(title="[bold yellow]Disk Usage[/bold yellow]", expand=True)
    table.add_column("Used")
    table.add_column("Total")
    table.add_column("Usage")
    table.add_column("Graph")
    table.add_row(
        f"{usage.used // (1024**3)} GB",
        f"{usage.total // (1024**3)} GB",
        colorize(usage.percent),
        graph
    )
    return Panel(table, border_style="grey37")

def get_network_panel():
    global prev_net
    net_io = psutil.net_io_counters()
    sent = (net_io.bytes_sent - prev_net.bytes_sent) / 1024
    recv = (net_io.bytes_recv - prev_net.bytes_recv) / 1024
    prev_net = net_io
    net_sent_history.append(sent)
    net_recv_history.append(recv)
    graph_sent = sparkline(net_sent_history, max_value=1000, color="cyan")
    graph_recv = sparkline(net_recv_history, max_value=1000, color="magenta")
    table = Table(title="[bold green]Network I/O[/bold green]", expand=True)
    table.add_column("Metric", style="bold")
    table.add_column("KB/s")
    table.add_column("Graph")
    table.add_row("Sent", f"[cyan]{sent:.1f}[/cyan]", graph_sent)
    table.add_row("Recv", f"[magenta]{recv:.1f}[/magenta]", graph_recv)
    return Panel(table, border_style="grey37")

def get_system_panel():
    load1, load5, load15 = os.getloadavg()
    uptime_sec = time.time() - psutil.boot_time()
    hours = int(uptime_sec // 3600)
    minutes = int((uptime_sec % 3600) // 60)
    now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    table = Table(title="[bold blue]System Info[/bold blue]", expand=True)
    table.add_column("Metric", style="bold")
    table.add_column("Value")
    table.add_row("Load Avg", f"[white]{load1:.2f}, {load5:.2f}, {load15:.2f}[/white]")
    table.add_row("Uptime", f"[white]{hours}h {minutes}m[/white]")
    table.add_row("Time", f"[white]{now}[/white]")
    return Panel(table, border_style="grey37")

def sensor_zone_lines(value, zones, label, unit, max_val):
    return [
        format_zone_bar(value, zones, label=label, unit=unit),
        Text(f"Max {label}: {max_val:.2f} {unit}", style="bold green")
    ]

def fade_spike_history(history, decay=0.99, floor=28.5):
    for i in range(len(history)):
        if history[i] > floor:
            history[i] *= decay
        if history[i] < floor:
            history[i] = 0.0  # Optional: reset below threshold

def update_scd4x_loop():
    while True:
        time.sleep(SCD4X_REFRESH)
        if scd4x.data_ready:
            co2_value = scd4x.CO2
            co2_history.append(co2_value)
            environment_data["CO‚ÇÇ"] = f"{scd4x.CO2} ppm"
            scd4x_data["Temperature"] = scd4x.temperature
            scd4x_data["Humidity"] = scd4x.relative_humidity
        else:
            environment_data["CO‚ÇÇ"] = "Not ready"
            scd4x_data["Temperature"] = "-"
            scd4x_data["Humidity"] = "-"


def build_i2c_panel():
    lines = []

    # busio.I2C(board.SCL, board.SDA)
    lines.append(Text("üîå busio.I2C(board.SCL, board.SDA)", style="bold cyan"))
    lines.append(Text("  ‚îú‚îÄ HTU21d @ 0x40"))
    lines.append(Text("  ‚îú‚îÄ SCD4X @ 0x62"))
    lines.append(Text("  ‚îú‚îÄ BH1750 @ 0x23"))
    lines.append(Text("  ‚îú‚îÄ AS7341 @ 0x39"))
    lines.append(Text("  ‚îú‚îÄ SHT31D @ 0x44"))
    lines.append(Text("  ‚îú‚îÄ MCP9808 @ 0x18"))
    lines.append(Text("  ‚îî‚îÄ ADT7410 @ 0x48"))
    lines.append(Text("  ‚îî‚îÄ AHTX0 @ 0x38"))

    lines.append(Text(""))  # Spacer

    # smbus2.SMBus(1)
    lines.append(Text("üîå smbus2.SMBus(1)", style="bold magenta"))
    lines.append(Text("  ‚îî‚îÄ BME280 @ 0x76"))

    body = Text("\n").join(lines)
    return Panel(body, title="üß≠ I¬≤C Port Map", border_style="grey37")

# DEFINITONS

LOG_PATH = Path("watering_log.json")
watering_notes = []

def load_watering_notes():
    if LOG_PATH.exists():
        with open(LOG_PATH, "r") as f:
            raw_notes = json.load(f)
            now = time.time()
            return [note for note in raw_notes if now - note["timestamp"] < 7 * 86400]
    return []

def save_watering_notes():
    with open(LOG_PATH, "w") as f:
        json.dump(watering_notes, f)

def get_last_watered_text():
    if not watering_notes:
        return Text("Last watered: [dim]No data[/dim]")
    last_entry = max(watering_notes, key=lambda n: n["timestamp"])
    date_str = time.strftime("%Y-%m-%d %H:%M", time.localtime(last_entry["timestamp"]))
    return Text(f"Last watered: {date_str}", style="green")

def watering_input_loop():
    global watering_notes
    watering_notes = load_watering_notes()
    while True:
        note = input("üíß Enter watering note (or 'q' to quit): ")
        if note.lower() == 'q':
            break
        entry = {
            "timestamp": time.time(),
            "text": note
        }
        watering_notes.append(entry)
        save_watering_notes()

def watchdog_ping_loop():
    while True:
        notify("WATCHDOG=1")
        time.sleep(10)  # Must be less than WatchdogSec

def print_animated_banner(text="DaPortalZ", font="slant", delay=0.1):
    figlet = Figlet(font=font)
    banner_lines = figlet.renderText(text).splitlines()
    terminal_width = os.get_terminal_size().columns

    for line in banner_lines:
        padded_line = line.center(terminal_width)
        console.print(padded_line, style="bold cyan")
        time.sleep(delay)

def get_mood_lux_palette():
    from datetime import datetime
    hour = datetime.now().hour

    if hour < 6:
        return [(50, "grey23"), (1000, "dark_blue"), (5000, "purple"), (10000, "red"), (16000, "deep_pink1")]
    elif hour < 12:
        return [(50, "blue"), (1000, "green"), (5000, "yellow"), (10000, "orange1"), (16000, "red")]
    elif hour < 18:
        return [(50, "sky_blue1"), (1000, "bright_green"), (5000, "gold1"), (10000, "red"), (16000, "deep_pink1")]
    else:
        return [(50, "dark_orange"), (1000, "orange3"), (5000, "red"), (10000, "deep_pink1"), (16000, "magenta")]


def get_ahtx0_stats():
    try:
        temp = ahtx0.temperature
        hum = ahtx0.relative_humidity
        ahtx0_temp_history.append(temp)
        ahtx0_hum_history.append(hum)

        max_values["AHTx0"] = {
            "Temp": max(max_values.get("AHTx0", {}).get("Temp", float('-inf')), temp),
            "Hum": max(max_values.get("AHTx0", {}).get("Hum", float('-inf')), hum)
        }

        return {"Temperature": temp, "Humidity": hum}
    except Exception as e:
        return {"Sensor Error": str(e)}

def get_htu21d_stats():
    try:
        temp = hts.temperature
        humidity = hts.relative_humidity
        temp_all_history.append(temp)
        for i, val in enumerate(temp_all_history):
            temp_spike_history[i] = max(temp_spike_history[i], val)
        hum_history.append(humidity)
        return {"Temperature": temp, "Humidity": humidity}
    except Exception as e:
        return {"Sensor Error": str(e)}

def get_bme280_stats():
    try:
        data = bme280.sample(bme_bus, bme_address, bme_calibration)
        pressure = data.pressure
        pressure_history.append(pressure)
        environment_data["Pressure"] = f"{data.pressure:.2f} hPa"
        return {"Temperature": data.temperature, "Humidity": data.humidity}
    except Exception as e:
        return {"Sensor Error": str(e)}

def get_bh1750_stats():
    try:
        lux = bh1750.lux
        lux_history.append(lux)
        max_values["BH1750"]["Lux"] = max(max_values["BH1750"]["Lux"], lux)
        return {
            "Light Level": f"{lux:.2f} Lux",
            "Max Lux": f"{max_values['BH1750']['Lux']:.2f} Lux"
        }
    except Exception as e:
        return {"Sensor Error": str(e)}

def get_as7341_panel():
    try:
        channels = {
            "Violet": (as7341.channel_415nm, "bright_magenta"),
            "Indigo": (as7341.channel_445nm, "blue"),
            "Blue":   (as7341.channel_480nm, "bright_blue"),
            "Cyan":   (as7341.channel_515nm, "cyan"),
            "Green":  (as7341.channel_555nm, "green"),
            "Yellow": (as7341.channel_590nm, "yellow"),
            "Orange": (as7341.channel_630nm, "orange3"),
            "Red":    (as7341.channel_680nm, "red")
        }

        lines = []
        for name, (value, color) in channels.items():
            bar_len = min(int(value / 1000), 40)
            bar = "‚ñà" * bar_len
            line = Text(f"{name:<7} [{value:5d}] ", style=color)
            line.append(bar, style=color)
            lines.append(line)

        return Panel(Text("\n").join(lines), title="üåà AS7341 Spectral Sensor", border_style="grey37")

    except Exception as e:
        return Panel(f"[red]Sensor Error: {e}", title="üåà AS7341 Spectral Sensor", border_style="grey37")

# DEF BUILD

def build_averages_panel():
    try:
        temps = list(temp_all_history)
        hums = list(hum_history)

        temp_mean = mean(temps)
        temp_median = median(temps)
        try:
            temp_mode = mode(temps)
        except StatisticsError:
            temp_mode = "No mode"

        hum_mean = mean(hums)
        hum_median = median(hums)
        try:
            hum_mode = mode(hums)
        except StatisticsError:
            hum_mode = "No mode"

        lines = [
            Text("üå° Temperature Stats", style="bold underline"),
            Text(f"Mean:    {temp_mean:.2f} ¬∞C", style="green"),
            Text(f"Median:  {temp_median:.2f} ¬∞C", style="yellow"),
            Text(f"Mode:    {temp_mode} ¬∞C", style="blue"),
            Text("üíß Humidity Stats", style="bold underline"),
            Text(f"Mean:    {hum_mean:.2f} %", style="green"),
            Text(f"Median:  {hum_median:.2f} %", style="yellow"),
            Text(f"Mode:    {hum_mode} %", style="blue"),
        ]

        return Panel(Text("\n").join(lines), title="üìà Sensor Averages", border_style="grey37")

    except Exception as e:
        return Panel(f"[red]Error calculating averages: {e}[/red]", title="üìà Sensor Averages", border_style="red")

def build_ahtx0_panel():
    data = get_ahtx0_stats()
    if "Sensor Error" in data:
        body = f"[red]{data['Sensor Error']}[/red]"
    else:
        temp = data["Temperature"]
        hum = data["Humidity"]
        lines = []
        lines += sensor_zone_lines(temp, ZONES_TEMP, "Duct Temp", "¬∞C", max_values["AHTx0"]["Temp"])
        lines += sensor_zone_lines(hum, ZONES_HUM, "Duct RH", "%", max_values["AHTx0"]["Hum"])
        body = Text("\n").join(lines)
    return Panel(body, title="üåÄ Duct Sensor (AHTx0)", border_style="grey37")

def build_watering_panel():
    recent_notes = [n for n in watering_notes if time.time() - n["timestamp"] < 7 * 86400]
    if not recent_notes:
        body = Text("No watering notes in the last 7 days.", style="dim")
    else:
        lines = [f"{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(n['timestamp']))} ‚Äî {n['text']}" for n in recent_notes[-5:]]
        body = Text("\n".join(lines), style="green")
    return Panel(body, title="ü™¥ Watering Log", border_style="grey37")

def build_htu21d_panel():
    data = get_htu21d_stats()
    if "Sensor Error" in data:
        body = f"[red]{data['Sensor Error']}[/red]"
    else:
        temp = data["Temperature"]
        hum = data["Humidity"]
        htu21d_history.append(temp)
        for i, val in enumerate(temp_all_history):
            temp_spike_history[i] = max(temp_spike_history[i], val)
        max_values["HTU21d"]["Temp"] = max(max_values["HTU21d"]["Temp"], temp)
        max_values["HTU21d"]["Hum"] = max(max_values["HTU21d"]["Hum"], hum)
        lines = []
        lines += sensor_zone_lines(temp, ZONES_TEMP, "Temp", "¬∞C", max_values["HTU21d"]["Temp"])
        lines += sensor_zone_lines(hum, ZONES_HUM, "Humidity", "%", max_values["HTU21d"]["Hum"])
        body = Text("\n").join(lines)
    return Panel(body, title="üíß HTU21d Sensor", border_style="grey37")

def build_scd4x_panel():
    if isinstance(scd4x_data["Temperature"], float):
        temp = scd4x_data["Temperature"]
        hum = scd4x_data["Humidity"]
        scd4x_history.append(temp)
        for i, val in enumerate(temp_all_history):
            temp_spike_history[i] = max(temp_spike_history[i], val)
        max_values["SCD4X"]["Temp"] = max(max_values["SCD4X"]["Temp"], temp)
        max_values["SCD4X"]["Hum"] = max(max_values["SCD4X"]["Hum"], hum)
        lines = []
        lines += sensor_zone_lines(temp, ZONES_TEMP, "Temp", "¬∞C", max_values["SCD4X"]["Temp"])
        lines += sensor_zone_lines(hum, ZONES_HUM, "Humidity", "%", max_values["SCD4X"]["Hum"])

        body = Text("\n").join(lines)
    else:
        body = f"[red]Sensor not ready[/red]"
    return Panel(body, title="ü´Å SCD4x Sensor", border_style="grey37")

def build_bme280_panel():
    data = get_bme280_stats()
    if "Sensor Error" in data:
        body = f"[red]{data['Sensor Error']}[/red]"
    else:
        temp = data["Temperature"]
        hum = data["Humidity"]
        temp_all_history.append(temp)
        for i, val in enumerate(temp_all_history):
            temp_spike_history[i] = max(temp_spike_history[i], val)
        max_values["BME280"]["Temp"] = max(max_values["BME280"]["Temp"], temp)
        max_values["BME280"]["Hum"] = max(max_values["BME280"]["Hum"], hum)
        lines = []
        lines += sensor_zone_lines(temp, ZONES_TEMP, "Temp", "¬∞C", max_values["BME280"]["Temp"])
        lines += sensor_zone_lines(hum, ZONES_HUM, "Humidity", "%", max_values["BME280"]["Hum"])
        body = Text("\n").join(lines)
    return Panel(body, title="üå§ BME280 Sensor", border_style="grey37")

def build_bh1750_panel():
    data = get_bh1750_stats()
    if "Sensor Error" in data:
        body = f"[red]{data['Sensor Error']}[/red]"
    else:
        lux_value = float(data['Light Level'].split()[0])
        # max_values["BH1750"]["Lux"] = max(max_values["BH1750"]["Lux"], lux_value)
        lines = [
            format_zone_bar(lux_value, get_mood_lux_palette(), label="Lux", unit="Lux", max_value=max_values["BH1750"]["Lux"]), 
            Text(f"Max Lux: {max_values['BH1750']['Lux']:.2f} Lux", style="bold green")
]

        body = Text("\n").join(lines)
    return Panel(body, title="üîÜ BH1750 Sensor", border_style="grey37")

def build_environment_panel():
    try:
        co2_str = environment_data["CO‚ÇÇ"]
        pressure_str = environment_data["Pressure"]

        co2_value = float(co2_str.split()[0]) if "ppm" in co2_str else 0.0
        pressure_value = float(pressure_str.split()[0]) if "hPa" in pressure_str else 0.0

        # Update max values
        max_values["Environment"]["CO‚ÇÇ"] = max(max_values["Environment"]["CO‚ÇÇ"], co2_value)
        max_values["Environment"]["Pressure"] = max(max_values["Environment"]["Pressure"], pressure_value)

        # Define zones
        lines = []
        lines += sensor_zone_lines(co2_value, ZONES_CO2, "CO‚ÇÇ", "ppm", max_values["Environment"]["CO‚ÇÇ"])
        lines += sensor_zone_lines(pressure_value, ZONES_PRESSURE, "Pressure", "hPa", max_values["Environment"]["Pressure"])
        body = Text("\n").join(lines)

    except Exception as e:
        body = f"[red]Sensor Error: {e}[/red]"

    return Panel(body, title="üåç Environment", border_style="grey37")

def build_room_panel():
    try:
        temp = sht31.temperature
        humidity = sht31.relative_humidity
        sht31d_history.append(temp)
        for i, val in enumerate(temp_all_history):
            temp_spike_history[i] = max(temp_spike_history[i], val)
        for i, val in enumerate(sht31d_history):
            sht31d_spike_history[i] = max(sht31d_spike_history[i], val)
        max_values["Room"]["Temp"] = max(max_values["Room"]["Temp"], temp)
        max_values["Room"]["Hum"] = max(max_values["Room"]["Hum"], humidity)
        lines = []
        lines += sensor_zone_lines(temp, ZONES_TEMP_ROOM, "Room Temp", "¬∞C", max_values["Room"]["Temp"])
        lines += sensor_zone_lines(humidity, ZONES_HUM, "Room Hum", "%", max_values["Room"]["Hum"])
        body = Text("\n").join(lines)
    except Exception as e:
        body = f"[red]Sensor Error: {e}[/red]"
    return Panel(body, title="üè† Room Stats (SHT31)", border_style="grey37")

def build_tent_panel():
    try:
        temp_mcp = mcp9808.temperature
        temp_adt = adt7410.temperature
        data_bme = get_bme280_stats()
        temp_bme = data_bme["Temperature"] if "Sensor Error" not in data_bme else None
        max_values["Tent"]["MCP9808"] = max(max_values["Tent"]["MCP9808"], temp_mcp)
        max_values["Tent"]["ADT7410"] = max(max_values["Tent"]["ADT7410"], temp_adt)
        if temp_bme is not None:
            max_values["Tent"]["BME280"] = max(max_values["Tent"]["BME280"], temp_bme)

        lines = []
        lines += sensor_zone_lines(temp_mcp, ZONES_TEMP, "MCP9808", "¬∞C", max_values["Tent"]["MCP9808"])
        lines += sensor_zone_lines(temp_adt, ZONES_TEMP, "ADT7410", "¬∞C", max_values["Tent"]["ADT7410"])
        if temp_bme is not None:
            lines += sensor_zone_lines(temp_bme, ZONES_TEMP, "BME280", "¬∞C", max_values["Tent"]["BME280"])
        body = Text("\n").join(lines)
    except Exception as e:
        body = f"[red]Sensor Error: {e}[/red]"
    return Panel(body, title="üå° Tent Heatmap", border_style="grey37")

def render_high_graph(data, threshold, max_value, width=60):
    blocks = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"
    graph = []
    for val in list(data)[-width:]:
        try:
            val = float(val)
        except:
            val = 0.0
        if val >= threshold:
            idx = min(int((val / max_value) * (len(blocks) - 1)), len(blocks) - 1)
            graph.append(blocks[idx])
        else:
            graph.append(" ")
    return Text("".join(graph), style="bold green")


def max_overlay_graph(current, spikes, threshold, max_value, width=60):
    blocks = "‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÖ‚ñÜ‚ñá‚ñà"
    graph = []
    for i in range(width):
        val = float(current[i]) if i < len(current) else 0.0
        spike = float(spikes[i]) if i < len(spikes) else 0.0
        show_val = max(val, spike)
        if show_val >= threshold:
            idx = min(int((show_val / max_value) * (len(blocks) - 1)), len(blocks) - 1)
            block = blocks[idx]
            style = "bold red"
        else:
            block = " "
            style = "dim"
        graph.append((block, style))
    return Text.assemble(*[Text(char, style=style) for char, style in graph])

def build_sensor_graph_panel():
    try:
        graphs = []

        # CO‚ÇÇ
        graphs.append(Text("CO‚ÇÇ ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(f" ‚îÇ {render_high_graph(co2_history, 1500, 2000).plain}"))
        graphs.append(Text(" ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))

        # Lux
        graphs.append(Text("Lux ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(f" ‚îÇ {render_high_graph(lux_history, 9000, 10500).plain}"))
        graphs.append(Text(" ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))

        # Temperature with spike overlays
        graphs.append(Text("¬∞C Max ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text("HTU21d ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(" ‚îÇ ") + max_overlay_graph(htu21d_history, temp_spike_history, 28.5, 40))

        graphs.append(Text("SCD4X ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(" ‚îÇ ") + max_overlay_graph(scd4x_history, temp_spike_history, 28.5, 40))

        graphs.append(Text("SHT31D ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(" ‚îÇ ") + max_overlay_graph(sht31d_history, sht31d_spike_history, 25.5, 30))
        graphs.append(Text(" ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))

        # Humidity
        graphs.append(Text("Rh ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(f" ‚îÇ {render_high_graph(hum_history, 70, 100).plain}"))
        graphs.append(Text(" ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))

        # Pressure
        graphs.append(Text("hPa ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))
        graphs.append(Text(f" ‚îÇ {render_high_graph(pressure_history, 1020, 1050).plain}"))
        graphs.append(Text(" ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"))

        graphs.append(Text("Time ‚Üí [Last 24h]"))
        body = Text("\n").join(graphs)

    except Exception as e:
        body = Text(f"[red]Sensor Graph Error: {e}[/red]")

    return Panel(body, title="üìä High Sensor Readings", border_style="grey37")

ENABLE_WEATHER_PANEL = True  # Toggle this to False to disable

def get_live_weather(city="BR6"):
    try:
        output = subprocess.check_output([
            "curl", "-s", f"wttr.in/{city}?format=%t|%h|%P|%w"
        ]).decode().strip()
        if not output or "Unknown location" in output:
            raise ValueError("No data received")
        temp, humidity, pressure, wind = output.split("|")
        co2 = environment_data.get("CO‚ÇÇ", "--")  # Use live SCD4X reading
        timestamp = datetime.now().strftime("%H:%M:%S")
        return {
            "Temperature": temp,
            "Humidity": humidity,
            "Pressure": pressure,
            "Wind": wind,
            "CO‚ÇÇ": co2,
            "Updated": timestamp,
            "Error": False
        }
    except Exception:
        return {
            "Temperature": "--",
            "Humidity": "--",
            "Pressure": "--",
            "Wind": "--",
            "CO‚ÇÇ": "--",
            "Updated": datetime.now().strftime("%H:%M:%S"),
            "Error": True
        }

def get_mood_color(temp_str):
    try:
        temp_val = int(temp_str.replace("+", "").replace("¬∞C", "").replace("‚àí", "-"))
        if temp_val < 10:
            return "blue"
        elif temp_val < 20:
            return "green"
        elif temp_val < 28:
            return "yellow"
        else:
            return "red"
    except:
        return "grey50"

def build_weather_panel():
    data = get_live_weather()
    if data["Error"]:
        return Panel("[red]Weather data unavailable[/red]", title="üå¶ Weather", border_style="grey37")

    lines = [
        Text(f"Temp: {data['Temperature']}"),
        Text(f"Humidity: {data['Humidity']}"),
        Text(f"Pressure: {data['Pressure']}"),
        Text(f"Wind: {data['Wind']}"),
        Text(f"CO‚ÇÇ: {data['CO‚ÇÇ']}"),
        Text(f"Updated: {data['Updated']}", style="dim")
    ]
    return Panel(Text("\n").join(lines), title="üå¶ Weather", border_style="grey37")


def calc_progress(prop_date, repot_date=None):
    try:
        fmt = "%d/%m/%y"
        start = datetime.strptime(prop_date, fmt)
        now = datetime.now()

        # Handle missing or empty repot_date
        if not repot_date or repot_date.strip() == "":
            total_weeks = 12  # Default cycle length
        else:
            end = datetime.strptime(repot_date, fmt)
            total_weeks = max(1, (end - start).days // 7)

        elapsed_weeks = max(0, (now - start).days // 7)
        bar_len = 20
        filled = min(bar_len, int((elapsed_weeks / total_weeks) * bar_len))

        bar = f"[{'#' * filled}{'-' * (bar_len - filled)}] {elapsed_weeks}w"
        return Text(bar, style="white")
    except Exception:
        return Text("[Invalid]", style="red")

def build_summary_panel():
    amber = "bold orange1"
    lines = []

    def timestamped(label, value):
        now = datetime.now().strftime("%H:%M:%S")
        return Text(f"[{now}] {label}: {value}", style=amber)

    # System stats
    mem = psutil.virtual_memory()
    disk = psutil.disk_usage("/")
    net = psutil.net_io_counters()
    load1, load5, load15 = os.getloadavg()
    uptime_sec = time.time() - psutil.boot_time()
    hours = int(uptime_sec // 3600)
    minutes = int((uptime_sec % 3600) // 60)

    # Sensor snapshots
    ahtx0_data = get_ahtx0_stats()
    htu21d_data = get_htu21d_stats()
    bme280_data = get_bme280_stats()
    bh1750_data = get_bh1750_stats()
    co2 = environment_data.get("CO‚ÇÇ", "--")
    pressure = environment_data.get("Pressure", "--")
    recent_notes = load_watering_notes()
    last_note = recent_notes[-1]["text"] if recent_notes else "None"

    # Add lines
    lines += [
        timestamped("CPU Load Avg", f"{load1:.2f}, {load5:.2f}, {load15:.2f}"),
        timestamped("Uptime", f"{hours}h {minutes}m"),
        timestamped("Memory Usage", f"{mem.percent:.1f}%"),
        timestamped("Disk Usage", f"{disk.percent:.1f}%"),
        timestamped("Net Sent", f"{net.bytes_sent / 1024:.1f} KB"),
        timestamped("Net Recv", f"{net.bytes_recv / 1024:.1f} KB"),
        timestamped("AHTx0 Temp", f"{ahtx0_data.get('Temperature', '--'):.2f} ¬∞C"),
        timestamped("AHTx0 Hum", f"{ahtx0_data.get('Humidity', '--'):.2f} %"),
        timestamped("HTU21d Temp", f"{htu21d_data.get('Temperature', '--'):.2f} ¬∞C"),
        timestamped("HTU21d Hum", f"{htu21d_data.get('Humidity', '--'):.2f} %"),
        timestamped("BME280 Temp", f"{bme280_data.get('Temperature', '--'):.2f} ¬∞C"),
        timestamped("BME280 Hum", f"{bme280_data.get('Humidity', '--'):.2f} %"),
        timestamped("BH1750 Lux", bh1750_data.get("Light Level", "--")),
        timestamped("CO‚ÇÇ", co2),
        timestamped("Pressure", pressure),
        timestamped("Last Watering Note", last_note)
    ]

    body = Text("\n").join(lines)
    # return Panel(body, title="üìã Summary Panel", border_style="orange1")
    return Panel(body, title="üìã Summary Panel", border_style="grey37")

def build_grow_panel():
    try:
        with open("plants.json", "r") as f:
            plants_data = json.load(f)
    except Exception as e:
        return Panel(f"[red]Error loading plants.json: {e}[/red]", title="üå± Grow Tracker", border_style="red")

    # üß± Table with expand=True to stretch full width
    table = Table(title="[bold green]Grow Tracker[/bold green]", expand=True)
    table.add_column("Name", style="bold green", justify="left", no_wrap=True)
    table.add_column("Type", style="cyan", justify="center")
    table.add_column("Propergated", style="magenta", justify="center")
    table.add_column("Re-Potted", style="yellow", justify="center")
    table.add_column("Progress", style="white", justify="left")
    table.add_column("Watering Schedule", style="blue", justify="center")

    for entry in plants_data:
        name = f"[link=]{entry['name']}[/link]"
        type_ = entry.get("type", "Unknown")
        prop_date = entry.get("propagation_date", "N/A")
        repot_date = entry.get("repot_date", "")
        last_watered = get_last_watered_text()
        progress = calc_progress(prop_date, repot_date)
        report = repot_date if repot_date else "[Pending]"

        table.add_row(name, type_, prop_date, report, progress, last_watered)

    return Panel(table, border_style="grey37")

from rich.console import Group
from rich.table import Table

def build_dashboard():
    # Main layout for top panels
    layout = Table.grid(padding=(1, 2))

    first_row_panels = [
        get_cpu_panel(),
        get_memory_panel(),
        get_disk_panel(),
        get_network_panel(),
        get_system_panel(),
        build_i2c_panel()
    ]

    if ENABLE_WEATHER_PANEL:
        first_row_panels.append(build_weather_panel())

    second_row_panels = [
        build_tent_panel(),
        build_environment_panel(),
        build_htu21d_panel(),
        build_scd4x_panel(),
        build_bme280_panel(),
        build_ahtx0_panel(),
        build_room_panel()
    ]

    third_row_panels = [
        build_sensor_graph_panel(),
        build_summary_panel(),
        get_as7341_panel(),
        build_bh1750_panel(),
        build_averages_panel(),
        build_watering_panel()
    ]

    # Add rows to main layout
    layout.add_row(*first_row_panels)
    layout.add_row(*second_row_panels)
    layout.add_row(*third_row_panels)

    # Separate layout for Grow Panel to avoid column stretching
    grow_layout = Table.grid(padding=(1, 2))
    grow_layout.add_row(build_grow_panel())  # Full-width, isolated

    # Combine both layouts
    return Group(layout, grow_layout)


def run_dashboard():
    threading.Thread(target=update_scd4x_loop, daemon=True).start()
    threading.Thread(target=watchdog_ping_loop, daemon=True).start()

    # üßº Clear screen before banner
    os.system("clear")  

    # üé≠ Animated banner intro
    print_animated_banner()
    time.sleep(2)  # Optional pause before dashboard kicks in
    threading.Thread(target=watering_input_loop, daemon=True).start()

    with Live(console=console, refresh_per_second=10, screen=True) as live:
        while True:
            fade_spike_history(temp_spike_history)
            live.update(build_dashboard())
            time.sleep(REFRESH_INTERVAL)

if __name__ == "__main__":
    run_dashboard()
