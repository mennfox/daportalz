from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
from rich.text import Text
import psutil
import time
import threading

import board
import busio
import adafruit_hts221
import adafruit_scd4x
import adafruit_bh1750
from adafruit_as7341 import AS7341

import smbus2
import bme280

# Initialize I2C and sensors
i2c = busio.I2C(board.SCL, board.SDA)
hts = adafruit_hts221.HTS221(i2c)
scd4x = adafruit_scd4x.SCD4X(i2c)
scd4x.start_periodic_measurement()
bh1750 = adafruit_bh1750.BH1750(i2c)
as7341 = AS7341(i2c)

bme_bus = smbus2.SMBus(1)
bme_address = 0x76
bme_calibration = bme280.load_calibration_params(bme_bus, bme_address)

console = Console()
REFRESH_INTERVAL = 1.0
SCD4X_REFRESH = 10.0

# Shared SCD4x data
scd4x_data = {
    "CO₂": "Waiting...",
    "Temperature": "Waiting...",
    "Humidity": "Waiting..."
}

def update_scd4x_loop():
    while True:
        time.sleep(SCD4X_REFRESH)
        if scd4x.data_ready:
            scd4x_data["CO₂"] = f"{scd4x.CO2} ppm"
            scd4x_data["Temperature"] = f"{scd4x.temperature:.1f}°C"
            scd4x_data["Humidity"] = f"{scd4x.relative_humidity:.1f}%"
        else:
            scd4x_data["CO₂"] = "Not ready"
            scd4x_data["Temperature"] = "-"
            scd4x_data["Humidity"] = "-"

# System usage stats
def get_usage_stats():
    cpu = psutil.cpu_percent(interval=None)
    ram = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    swap = psutil.swap_memory()
    net = psutil.net_io_counters()

    return {
        "CPU": f"{cpu:.1f}%",
        "RAM": f"{ram.percent:.1f}% ({ram.used / (1024**2):.1f}MB / {ram.total / (1024**2):.1f}MB)",
        "Disk": f"{disk.percent:.1f}% ({disk.used / (1024**3):.1f}GB / {disk.total / (1024**3):.1f}GB)",
        "Swap": f"{swap.percent:.1f}% ({swap.used / (1024**2):.1f}MB / {swap.total / (1024**2):.1f}MB)",
        "Net Up": f"{net.bytes_sent / (1024**2):.2f} MB",
        "Net Down": f"{net.bytes_recv / (1024**2):.2f} MB"
    }

# HTS221 sensor stats
def get_hts221_stats():
    try:
        temp = hts.temperature
        humidity = hts.relative_humidity
        return {
            "Temperature": f"{temp:.2f}°C",
            "Humidity": f"{humidity:.2f}% rH"
        }
    except Exception as e:
        return {"Sensor Error": str(e)}

# BME280 sensor stats
def get_bme280_stats():
    try:
        data = bme280.sample(bme_bus, bme_address, bme_calibration)
        return {
            "Temperature": f"{data.temperature:.2f}°C",
            "Pressure": f"{data.pressure:.2f} hPa",
            "Humidity": f"{data.humidity:.2f}%"
        }
    except Exception as e:
        return {"Sensor Error": str(e)}

# BH1750 sensor stats
def get_bh1750_stats():
    try:
        lux = bh1750.lux
        return {"Light Level": f"{lux:.2f} Lux"}
    except Exception as e:
        return {"Sensor Error": str(e)}

# AS7341 spectral stats
def get_as7341_panel():
    try:
        channels = {
            "Violet": (as7341.channel_415nm, "bright_magenta"),
            "Indigo": (as7341.channel_445nm, "blue"),
            "Blue":   (as7341.channel_480nm, "bright_blue"),
            "Cyan":   (as7341.channel_515nm, "cyan"),
            "Green":  (as7341.channel_555nm, "green"),
            "Yellow": (as7341.channel_590nm, "yellow"),
            "Orange": (as7341.channel_630nm, "orange3"),
            "Red":    (as7341.channel_680nm, "red")
        }

        lines = []
        for name, (value, color) in channels.items():
            bar_len = min(int(value / 1000), 40)
            bar = "█" * bar_len
            line = Text(f"{name:<7} [{value:5d}] ", style=color)
            line.append(bar, style=color)
            lines.append(line)

        return Panel(Text("\n").join(lines), title="🌈 AS7341 Spectral Sensor", border_style="bright_white")

    except Exception as e:
        return Panel(f"[red]Sensor Error: {e}", title="🌈 AS7341 Spectral Sensor", border_style="red")

# Panel builders
def build_usage_panel():
    stats = get_usage_stats()
    body = "\n".join([f"[bold cyan]{k}:[/bold cyan] {v}" for k, v in stats.items()])
    return Panel(body, title="📊 System Usage", border_style="cyan")

def build_hts221_panel():
    data = get_hts221_stats()
    body = "\n".join([f"[bold green]{k}:[/bold green] {v}" for k, v in data.items()])
    return Panel(body, title="💧 HTS221 Sensor", border_style="green")

def build_scd4x_panel():
    body = "\n".join([f"[bold magenta]{k}:[/bold magenta] {v}" for k, v in scd4x_data.items()])
    return Panel(body, title="🫁 SCD4x Sensor", border_style="magenta")

def build_bme280_panel():
    data = get_bme280_stats()
    body = "\n".join([f"[bold yellow]{k}:[/bold yellow] {v}" for k, v in data.items()])
    return Panel(body, title="🌤 BME280 Sensor", border_style="yellow")

def build_bh1750_panel():
    data = get_bh1750_stats()
    body = "\n".join([f"[bold blue]{k}:[/bold blue] {v}" for k, v in data.items()])
    return Panel(body, title="🔆 BH1750 Sensor", border_style="blue")

# Dashboard layout
def build_dashboard():
    layout = Table.grid(padding=(1, 2))
    layout.add_row(
        build_usage_panel(),
        build_hts221_panel(),
        build_scd4x_panel(),
        build_bme280_panel(),
        build_bh1750_panel()
    )
    layout.add_row(get_as7341_panel())
    return layout

# Live loop
def run_dashboard():
    threading.Thread(target=update_scd4x_loop, daemon=True).start()
    with Live(console=console, refresh_per_second=10, screen=True) as live:
        while True:
            live.update(build_dashboard())
            time.sleep(REFRESH_INTERVAL)

if __name__ == "__main__":
    run_dashboard()
