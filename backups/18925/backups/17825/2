from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.live import Live
import psutil
import time

import board
import busio
import adafruit_hts221

# Initialize HTS221 sensor
i2c = busio.I2C(board.SCL, board.SDA)
hts = adafruit_hts221.HTS221(i2c)

console = Console()
REFRESH_INTERVAL = 1.0  # seconds

# System usage stats
def get_usage_stats():
    cpu = psutil.cpu_percent(interval=None)
    ram = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    swap = psutil.swap_memory()
    net = psutil.net_io_counters()

    return {
        "CPU": f"{cpu:.1f}%",
        "RAM": f"{ram.percent:.1f}% ({ram.used / (1024**2):.1f}MB / {ram.total / (1024**2):.1f}MB)",
        "Disk": f"{disk.percent:.1f}% ({disk.used / (1024**3):.1f}GB / {disk.total / (1024**3):.1f}GB)",
        "Swap": f"{swap.percent:.1f}% ({swap.used / (1024**2):.1f}MB / {swap.total / (1024**2):.1f}MB)",
        "Net Up": f"{net.bytes_sent / (1024**2):.2f} MB",
        "Net Down": f"{net.bytes_recv / (1024**2):.2f} MB"
    }

# HTS221 sensor stats
def get_hts221_stats():
    try:
        temp = hts.temperature
        humidity = hts.relative_humidity
        return {
            "Temperature": f"{temp:.2f}Â°C",
            "Humidity": f"{humidity:.2f}% rH"
        }
    except Exception as e:
        return {"Sensor Error": str(e)}

# Panel builders
def build_usage_panel():
    stats = get_usage_stats()
    body = "\n".join([f"[bold cyan]{k}:[/bold cyan] {v}" for k, v in stats.items()])
    return Panel(body, title="ðŸ“Š System Usage", border_style="cyan")

def build_hts221_panel():
    data = get_hts221_stats()
    body = "\n".join([f"[bold green]{k}:[/bold green] {v}" for k, v in data.items()])
    return Panel(body, title="ðŸ’§ HTS221 Sensor", border_style="green")

# Dashboard layout
def build_dashboard():
    layout = Table.grid(padding=(1, 2))
    layout.add_row(build_usage_panel(), build_hts221_panel())
    return layout

# Live loop
def run_dashboard():
    with Live(console=console, refresh_per_second=10, screen=True) as live:
        while True:
            live.update(build_dashboard())
            time.sleep(REFRESH_INTERVAL)

if __name__ == "__main__":
    run_dashboard()
