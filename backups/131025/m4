# modules/moisture_chart.py

import board
import busio
import adafruit_ads1x15.ads1015 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
from rich.text import Text
from rich.panel import Panel
from rich.table import Table

# Initialize I2C and ADC
i2c = busio.I2C(board.SCL, board.SDA)
ads = ADS.ADS1015(i2c, address=0x49)
channels = [AnalogIn(ads, ADS.P0), AnalogIn(ads, ADS.P1), AnalogIn(ads, ADS.P2), AnalogIn(ads, ADS.P3)]

# Extended gradient from dry to wet
GRADIENT_STYLES = [
    "bright_yellow", "yellow", "bright_green", "green",
    "bright_cyan", "cyan", "bright_blue", "blue", "grey37"
]

# Map voltage to gradient index
def get_gradient_color(voltage, min_v=1.5, max_v=3.3):
    norm = max(min((voltage - min_v) / (max_v - min_v), 1.0), 0.0)
    idx = int(norm * (len(GRADIENT_STYLES) - 1))
    return GRADIENT_STYLES[idx]

# Build horizontal bar with gradient fill
def build_bar(voltage, width=30):
    filled = int((voltage / 3.3) * width)
    bar = Text()
    for i in range(width):
        style = get_gradient_color(voltage) if i < filled else "grey23"
        bar.append("â–ˆ", style=style)
    return bar

# Build moisture panel
def build_moisture_panel():
    values = [chan.voltage for chan in channels]
    table = Table.grid(padding=(0, 1))
    table.add_column(justify="left", style="bold white")
    table.add_column(justify="left")
    table.add_column(justify="left", style="bold white")

    for idx, voltage in enumerate(values):
        bar = build_bar(voltage)
        label = f"CH{idx+1}"
        volt_str = f"{voltage:.2f} V"
        table.add_row(label, bar, volt_str)

    return Panel(table, title="ðŸŒ± Moisture Chart", border_style="grey37")

